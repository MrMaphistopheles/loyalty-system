generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider     = "mysql"
    url          = env("DATABASE_URL")
    relationMode = "prisma"
}

// Necessary for Next auth

enum UserRole {
    ADMIN
    MANAGER
    WAITER
    USER
    NEW
}

model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? @db.Text
    access_token      String? @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    role          UserRole? @default(USER)
    accounts      Account[]
    sessions      Session[]

    //User property
    createdAt       DateTime          @default(now())
    bonusAcc        bonusAcc[]
    bonusSystem     bonusSystem[]
    purchaseHistory purchaseHistory[]

    createdBy  User[]       @relation(name: "ADMIN")
    created    User[]       @relation(name: "ADMIN")
    Theme      Theme[]
    menu       menu[]
    rate       Rate[]
    tips       tips[]
    tipBalance tipBalance[]
    withdraw   withdraw[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model bonusAcc {
    id              String            @id @default(cuid())
    balance         Int               @default(1)
    companyId       String?
    userId          String
    user            User              @relation(fields: [userId], references: [id], onDelete: Cascade)
    createdAt       DateTime          @default(now())
    purchaseHistory purchaseHistory[]
}

model bonusSystem {
    id        String   @id @default(cuid())
    gift      Int      @default(7)
    User      User?    @relation(fields: [userId], references: [id])
    userId    String?
    createdAt DateTime @default(now())
}

model purchaseHistory {
    id         String    @id @default(cuid())
    gotFree    String    @default("none")
    createdAt  DateTime  @default(now())
    userId     String
    user       User      @relation(fields: [userId], references: [id], onDelete: Cascade)
    bonusAcc   bonusAcc? @relation(fields: [bonusAccId], references: [id])
    bonusAccId String?
}

model Rate {
    id          String   @id @default(cuid())
    stars       Int      @default(0)
    description Bytes?
    customarId  String
    User        User?    @relation(fields: [waiterId], references: [id])
    waiterId    String?
    createdAt   DateTime @default(now())
    updatedAt   DateTime @updatedAt
    tips        tips[]
}

model Theme {
    id        String   @id @default(cuid())
    color     String   @default("FF6161")
    image     String?
    userId    String
    user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
    createdAt DateTime @default(now())
}

model menu {
    id        String      @id @default(cuid())
    categorys categorys[]
    createdAt DateTime    @default(now())
    User      User?       @relation(fields: [userId], references: [id])
    userId    String?
}

model categorys {
    id        String   @id @default(cuid())
    name      String
    dish      dish[]
    menu      menu?    @relation(fields: [menuId], references: [id])
    menuId    String?
    createdAt DateTime @default(now())
}

model dish {
    id          String     @id @default(cuid())
    name        String
    description Bytes?
    images      images[]
    price       Int?       @default(0)
    categorys   categorys? @relation(fields: [categorysId], references: [id])
    categorysId String?
    createdAt   DateTime   @default(now())
}

model images {
    id        String   @id @default(cuid())
    path      String
    dish      dish?    @relation(fields: [dishId], references: [id])
    dishId    String?
    createdAt DateTime @default(now())
}

model tips {
    id          String        @id @default(cuid())
    orderId     String        @unique
    orderDesc   String
    amount      Int
    payment_id  String
    customarId  String
    createdAt   DateTime      @default(now())
    orderStatus String
    transaction Transaction[]
    // waiter connections 
    User        User?         @relation(fields: [userId], references: [id])
    userId      String?
    Rate        Rate          @relation(fields: [rateId], references: [id])
    rateId      String
}

model tipBalance {
    id        String   @id @default(cuid())
    balance   Int      @default(0)
    reserved  Int?     @default(0)
    card      String   @default("0000 0000 0000 0000")
    User      User?    @relation(fields: [userId], references: [id])
    userId    String?
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model withdraw {
    id        String   @id @default(cuid())
    amount    Int
    createdAt DateTime @default(now())
    accepted  Boolean
    status    String   @default("processing")
    User      User?    @relation(fields: [userId], references: [id])
    userId    String?
}

model Transaction {
    id                        String  @id @default(cuid())
    actual_amount             String
    actual_currency           String
    additional_info           Bytes
    amount                    String
    approval_code             String
    card_bin                  String
    card_type                 String
    currency                  String
    eci                       String
    fee                       String
    get_without_parameters    String
    masked_card               String
    merchant_data             String
    merchant_id               String
    order_id                  String
    order_status              String
    order_time                String
    parent_order_id           String
    payment_id                String
    payment_system            String
    product_id                String
    rectoken                  String
    rectoken_lifetime         String
    response_code             String
    response_description      String
    response_signature_string Bytes
    response_status           String
    reversal_amount           String
    rrn                       String
    sender_account            String
    sender_cell_phone         String
    sender_email              String
    settlement_amount         String
    settlement_currency       String
    settlement_date           String
    signature                 String
    tran_type                 String
    verification_status       String
    tips                      tips?   @relation(fields: [tipsId], references: [id])
    tipsId                    String?
}
