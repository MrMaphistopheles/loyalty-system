generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider     = "mysql"
    url          = env("DATABASE_URL")
    relationMode = "prisma"
}

// Necessary for Next auth

enum UserRole {
    ADMIN
    MANAGER
    WAITER
    USER
    NEW
}

model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? @db.Text
    access_token      String? @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    role          UserRole? @default(USER)
    accounts      Account[]
    sessions      Session[]

    //User property
    createdAt       DateTime          @default(now())
    bonusAcc        bonusAcc[]
    bonusSystem     bonusSystem[]
    purchaseHistory purchaseHistory[]

    createdBy User[]  @relation(name: "ADMIN")
    created   User[]  @relation(name: "ADMIN")
    Theme     Theme[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model bonusAcc {
    id              String            @id @default(cuid())
    balance         Int               @default(1)
    companyId       String?
    userId          String
    user            User              @relation(fields: [userId], references: [id], onDelete: Cascade)
    createdAt       DateTime          @default(now())
    purchaseHistory purchaseHistory[]
}

model bonusSystem {
    id        String   @id @default(cuid())
    gift      Int      @default(7)
    User      User?    @relation(fields: [userId], references: [id])
    userId    String?
    createdAt DateTime @default(now())
}

model purchaseHistory {
    id         String    @id @default(cuid())
    gotFree    String    @default("none")
    createdAt  DateTime  @default(now())
    userId     String
    user       User      @relation(fields: [userId], references: [id], onDelete: Cascade)
    bonusAcc   bonusAcc? @relation(fields: [bonusAccId], references: [id])
    bonusAccId String?
}

model Theme {
    id        String   @id @default(cuid())
    color     String   @default("FF6161")
    image     String?
    userId    String
    user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
    createdAt DateTime @default(now())
}
